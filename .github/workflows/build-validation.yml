# This is a basic workflow to help you get started with Actions
name: "Snippets 5000"

# Controls when the action will run. Triggers the workflow on push or pull request
# events on the main branch only.
on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      reason:
        description: "The reason for running the workflow"
        required: true
        default: "Manual run"

env:
  DOTNET_INSTALLER_CHANNEL: "7.0"
  DOTNET_DO_INSTALL: "true" # True to install preview versions, False to use the pre-installed (released) SDK
  EnableNuGetPackageRestore: "True"
  repo: "docs"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "snippets-build"
  snippets-build:
    # The type of runner that the job will run on
    runs-on: windows-2022
    permissions:
      statuses: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b

      # Get the latest preview SDK (or sdk not installed by the runner)
      - name: Setup .NET SDK
        if: ${{ env.DOTNET_DO_INSTALL == 'true' }}
        run: |
          echo "Downloading dotnet-install.ps1"
          Invoke-WebRequest https://raw.githubusercontent.com/dotnet/install-scripts/master/src/dotnet-install.ps1 -OutFile dotnet-install.ps1
          echo "Installing dotnet version ${{ env.DOTNET_INSTALLER_CHANNEL }}"
          .\dotnet-install.ps1 -InstallDir "c:\program files\dotnet" -Channel "${{ env.DOTNET_INSTALLER_CHANNEL }}" -Quality preview

      # Print dotnet info
      - name: Display .NET info
        run: |
          dotnet --info

      # Install locate projs global tool
      - name: Install LocateProjects tool
        run: |
          dotnet tool install --global --add-source ./.github/workflows/dependencies/ DotnetDocsTools.LocateProjects

      # Run locate projs tool
      - name: Locate projects for PR
        env:
          GitHubKey: ${{ secrets.GITHUB_TOKEN }}
          LocateExts: ".cs;.vb;.fs;.cpp;.h;.xaml;.razor;.cshtml;.vbhtml;.csproj;.fsproj;.vbproj;.vcxproj;.sln"
        run: |
          ./.github/workflows/dependencies/Get-MSBuildResults.ps1 "${{ github.workspace }}" -PullRequest ${{ github.event.number }} -RepoOwner ${{ github.repository_owner }} -RepoName ${{ github.event.repository.name }}

      # Update build output json file
      - name: Upload build results
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb
        with:
          name: build
          path: ./output.json

      # Return status based on json file
      - name: Report status
        run: |
          ./.github/workflows/dependencies/Out-GithubActionStatus.ps1
