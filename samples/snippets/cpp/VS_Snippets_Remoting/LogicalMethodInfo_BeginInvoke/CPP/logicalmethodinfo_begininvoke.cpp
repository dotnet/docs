// System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke(object,object[],AsyncCallback,object)
// System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke(object,IAsyncResult)

/* The following example demonstrates 'BeginInvoke' and 'EndInvoke' methods of
'LogicalMethodInfo' class. The 'Add' method of Math web service is called in asynchronous mode. 'BeginInvoke'
begins asynchronous invocation of method and 'EndInvoke' terminates the invocation
started by 'BeginInvoke'. The return value returned by 'Endinvoke' is displayed.

Note:  The MyMath class is a proxy class generated by the Wsdl.exe utility for
the Math Web Service. This class can also be found in SoapHttpClientProtocol Class example.
*/

#using <System.Xml.dll>
#using <System.Web.Services.dll>
#using <System.dll>

using namespace System;
using namespace System::Reflection;
using namespace System::Web::Services::Protocols;
using namespace System::Security::Permissions;

// Automatically generated proxy class for Math Web service.
// This class can also be found in the SoapHttpClientProtocol class example.
namespace MyMath
{
   using namespace System::Diagnostics;
   using namespace System::Xml::Serialization;
   using namespace System::Web::Services::Protocols;
   using namespace System::Web::Services;

   [System::Web::Services::WebServiceBindingAttribute(
      Name="MyMathSoap",Namespace="http://tempuri.org/")]
   public ref class MyMath: public System::Web::Services::Protocols::SoapHttpClientProtocol
   {
   public:
      MyMath()
      {
         this->Url = "http://localhost/Math.asmx";
      }

      [System::Web::Services::Protocols::SoapDocumentMethodAttribute(
         "http://tempuri.org/Add",
         Use=System::Web::Services::Description::SoapBindingUse::Literal,
         ParameterStyle=System::Web::Services::Protocols::SoapParameterStyle::Wrapped)]
      int Add( int x, int y )
      {
         array<Object^>^ temp2 = { x, y };
         array<Object^>^ results = this->Invoke( "Add", temp2 );
         return  (int)( results[ 0 ] );
      }

      System::IAsyncResult^ BeginAdd( int x, int y, System::AsyncCallback^ callback, Object^ asyncState )
      {
         array<Object^>^ temp3 = {x,y};
         return this->BeginInvoke( "Add", temp3, callback, asyncState );
      }

      int EndAdd( System::IAsyncResult^ asyncResult )
      {
         array<Object^>^ results = this->EndInvoke( asyncResult );
         return  (int)( results[ 0 ] );
      }
   };
}

public ref class BeginInvokeClass
{
   // <Snippet1>
   // <Snippet2>
public:
   [PermissionSet(SecurityAction::Demand, Name="FullTrust")]
   static void main()
   {
      // Get the type information.
      // Note: The MyMath class is a proxy class generated by the Wsdl.exe
      // utility for the Math Web service. This class can also be found in
      // the SoapHttpClientProtocol class example.
      Type^ myType = MyMath::MyMath::typeid;

      // Get the method info.
      MethodInfo^ myBeginMethod = myType->GetMethod( "BeginAdd" );
      MethodInfo^ myEndMethod = myType->GetMethod( "EndAdd" );

      // Create an instance of the LogicalMethodInfo class.
      array<MethodInfo^>^ temp0 = { myBeginMethod, myEndMethod };
      LogicalMethodInfo^ myLogicalMethodInfo =
         ( LogicalMethodInfo::Create( temp0, LogicalMethodTypes::Async ) )[ 0 ];

      // Get an instance of the proxy class.
      MyMath::MyMath^ myMathService = gcnew MyMath::MyMath;

      // Call the MyEndIntimationMethod method to intimate the end of
      // the asynchronous call.
      AsyncCallback^ myAsyncCallback = gcnew AsyncCallback( MyEndIntimationMethod );

      // Begin to invoke the Add method.
      array<Object^>^ temp1 = { 10, 10 };
      IAsyncResult^ myAsyncResult = myLogicalMethodInfo->BeginInvoke(
         myMathService, temp1, myAsyncCallback, nullptr );

      // Wait until invoke is complete.
      myAsyncResult->AsyncWaitHandle->WaitOne();

      // Get the result.
      array<Object^>^ myReturnValue;
      myReturnValue = myLogicalMethodInfo->EndInvoke( myMathService, myAsyncResult );

      Console::WriteLine( "Sum of 10 and 10 is {0}", myReturnValue[ 0 ] );
   }

   // This method will be called at the end of the asynchronous call.
   static void MyEndIntimationMethod( IAsyncResult^ /*Result*/ )
   {
      Console::WriteLine( "Asynchronous call on Add method finished." );
   }
   // </Snippet2>
   // </Snippet1>
};

int main()
{
   BeginInvokeClass::main();
}
