<Window x:Class="FlowDocumentSnippets.Window1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Title="FlowDocumentSnippets" Loaded="WindowLoaded"
>
  <Grid>
    <Grid.RowDefinitions>
      <RowDefinition Height="0"/>

      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition Height="0"/>
      <RowDefinition/>
      <RowDefinition/>
    </Grid.RowDefinitions>

    <Grid Grid.Row="0">
      <FlowDocumentReader>
        <FlowDocument Name="fd"/>
      </FlowDocumentReader>
    </Grid>

    <Grid Grid.Row="1"  Width="600" Height="400">
      <Border BorderThickness="1" BorderBrush="Black">
        <!--<Snippet_FlowDocumentColumnStuffXAML>-->
        <FlowDocumentReader>
          <FlowDocument 
            ColumnGap="20.0" 
            ColumnRuleBrush="DodgerBlue" 
            ColumnRuleWidth="5.0" 
            ColumnWidth="140.0"
        >
            <Paragraph  Background="AntiqueWhite" TextAlignment="Left">
              This paragraph has the background set to antique white to make its
              boundaries obvious.

              The column gap is the space between columns; this FlowDocument will
              have a column gap of 20 device-independend pixels.  The column rule
              is a vertical line drawn in the column gap, and is used to visually
              separate columns; this FlowDocument a Dodger-blue column rule that
              is 5 pixels wide.

              The column rule and column gap both take space between columns.  In
              this case, a column gap width of 20 plus a column rule of width of 5
              results in the space between columns being 25 pixels wide, 5 pixels
              for the column rule, and 10 pixels of column gap on either side of the column rule.
            </Paragraph>
          </FlowDocument>
        </FlowDocumentReader>
        <!--</Snippet_FlowDocumentColumnStuffXAML>-->
      </Border>
    </Grid>

    <Grid Grid.Row="2">
      <!--<Snippet_FlowDocumentBackgroundXAML>-->
      <FlowDocumentReader>
        <FlowDocument 
          Background="IndianRed"
          Foreground="NavajoWhite"
        >
          <Paragraph>
            This FlowDocument will have a background color of Indian red, with the text
            colored Navajo white.  Any Forground or Background settings on this paragraph
            would override the top-level settings for the FlowDocument.
          </Paragraph>
        </FlowDocument>
      </FlowDocumentReader>
      <!--</Snippet_FlowDocumentBackgroundXAML>-->
    </Grid>

    <Grid Grid.Row="3">
      <Border BorderThickness="1" BorderBrush="Black">
        <!--<Snippet_FlowDocumentColumnWidthXAML>-->
        <FlowDocumentReader>
          <FlowDocument ColumnWidth="140.0">
            <Paragraph>
              Columns of content within a page in this FlowDocument will be at least 140 pixels wide.
            </Paragraph>
          </FlowDocument>
        </FlowDocumentReader>
        <!--</Snippet_FlowDocumentColumnWidthXAML>-->
      </Border>
    </Grid>

    <Grid Grid.Row="4" Width="400" Height="300">
      <Border BorderThickness="1" BorderBrush="Black">
        <!--<Snippet_FlowDocumentFlowDirectionXAML>-->
        <FlowDocumentReader>
          <FlowDocument 
            FlowDirection="LeftToRight"
          >
            <Paragraph>
              The FlowDirection of content typically corresponds to the innate flow direction
              of the language being represented.  Hebrew and Arabic provide examples of
              languages that naturally flow from right-to-left.  English, German, and Russian
              provide examples of languages that naturally flow from left-to-right.
            </Paragraph>
          </FlowDocument>
        </FlowDocumentReader>
        <!--</Snippet_FlowDocumentFlowDirectionXAML>-->
      </Border>
    </Grid>

    <Grid Grid.Row="5" Width="400" Height="300">
      <Border BorderThickness="1" BorderBrush="Black">
        <!--<Snippet_FlowDocumentFontStuffXAML>-->
        <FlowDocumentReader>
          <FlowDocument
            FontFamily="Century Gothic"
            FontSize="12"
            FontStretch="UltraExpanded"
            FontStyle="Italic"
            FontWeight="UltraBold"
          >
            <Paragraph>
              Any font settings on this paragraph would override the font settings
              for the FlowDocument.
            </Paragraph>
          </FlowDocument>
        </FlowDocumentReader>
        <!--</Snippet_FlowDocumentFontStuffXAML>-->
      </Border>
    </Grid>


    <Grid Grid.Row="6">
      <!--<Snippet_FlowDocumentColumnFlexXAML>-->
      <FlowDocumentReader>
        <FlowDocument
          IsColumnWidthFlexible="True"
          PageWidth="400"
          ColumnWidth="100"
          PagePadding="0"
        >
          <Paragraph>
            If <Bold>IsColumnWidthFlexible</Bold> is false, this FlowDocument will always
            have 4 columns of width 100.  Because <Bold>IsColumnWidthFlexible</Bold> is true,
            this FlowDocument may be laid out such that the width of the is more than 100, resluting in
            fewer than 4 columns.
          </Paragraph>
        </FlowDocument>
      </FlowDocumentReader>
      <!--</Snippet_FlowDocumentColumnFlexXAML>-->
    </Grid>

    <Grid Grid.Row="8">
      <!--<Snippet_FlowDocumentLineHeightXAML>-->
      <FlowDocumentReader>
        <FlowDocument
          FontSize="24"
          LineHeight="48"
        >
          <Paragraph TextAlignment="Left" Background="AliceBlue">
            One<LineBreak/>
            two two<LineBreak/>
            Three Three Three<LineBreak/>
            four four four four<LineBreak/>
            Five Five Five Five Five
          </Paragraph>
        </FlowDocument>
      </FlowDocumentReader>
      <!--</Snippet_FlowDocumentLineHeightXAML>-->
    </Grid>

    <Grid Grid.Row="9">
      <!--<Snippet_FlowDocumentPageWidthHeightXAML>-->
      <FlowDocumentReader>
        <FlowDocument
          PageHeight="Auto"
          PageWidth="Auto"
          MinPageHeight="3in"
          MinPageWidth="5in"
          MaxPageHeight="6in"
          MaxPageWidth="10in"
        >
          <Paragraph Background="BlanchedAlmond">
            This uses automatic page sizing with minimum page size of 3 by 5 inches,
            and a maximum page size of 6 by 10 inches.
          </Paragraph>
        </FlowDocument>
      </FlowDocumentReader>
      <!--</Snippet_FlowDocumentPageWidthHeightXAML>-->
    </Grid>

    <Grid Grid.Row="10">
      <!--<Snippet_FlowDocumentPaddingXAML>-->
      <FlowDocumentReader>
        <FlowDocument PagePadding="10">
          <Paragraph>Padding is 10 pixels all around.</Paragraph>
        </FlowDocument>
      </FlowDocumentReader>

      <FlowDocumentReader>
        <FlowDocument PagePadding="1.5in">
          <Paragraph>Padding is 1 and a half inches all around.</Paragraph>
        </FlowDocument>
      </FlowDocumentReader>

      <FlowDocumentReader>
        <FlowDocument PagePadding="5,10,5,10">
          <Paragraph>Padding is 5 pixels on the right and left, and 10 pixels on the top and botton.</Paragraph>
        </FlowDocument>
      </FlowDocumentReader>

      <FlowDocumentReader>
        <FlowDocument PagePadding="0.8in,20,0.8in,20">
          <Paragraph>Padding is 1 eigth of an inch on the right and left, and 20 pixels on the top and botton.</Paragraph>
        </FlowDocument>
      </FlowDocumentReader>
      <!--</Snippet_FlowDocumentPaddingXAML>-->
    </Grid>

    <Grid Grid.Row="11">
      <!--<Snippet_FlowDocumentTextAlignmentXAML>-->
      <FlowDocumentReader>
        <FlowDocument
          TextAlignment="Center"
      >
          <Paragraph Background="GhostWhite">
            One<LineBreak/>
            two two<LineBreak/>
            Three Three Three<LineBreak/>
            four four four four<LineBreak/>
            Five Five Five Five Five<LineBreak/>
            six six six six six six<LineBreak/>
            Seven Seven Seven Seven Seven Seven Seven<LineBreak/>
            eight eight eight eight eight eight eight eight
          </Paragraph>
        </FlowDocument>
      </FlowDocumentReader>
      <!--</Snippet_FlowDocumentTextAlignmentXAML>-->
    </Grid>

    <Grid Grid.Row="12">
      <!--<Snippet_FlowDocumentTypographyXAML>-->
      <FlowDocumentReader>
        <FlowDocument
          Typography.Capitals="SmallCaps"
          Typography.CapitalSpacing="True"
          Typography.CaseSensitiveForms="True"
          Typography.ContextualAlternates="False"
          Typography.ContextualLigatures="False"
          Typography.DiscretionaryLigatures="True"
          Typography.EastAsianExpertForms="True"
          Typography.EastAsianLanguage="Traditional"
          Typography.EastAsianWidths="Proportional"
          Typography.Fraction="Stacked"
          Typography.HistoricalForms="True"
          Typography.HistoricalLigatures="True"
          Typography.Kerning="False"
          Typography.MathematicalGreek="True"
          Typography.NumeralAlignment="Proportional"
          Typography.NumeralStyle="OldStyle"
          Typography.SlashedZero="True"
          Typography.StandardLigatures="False"
          Typography.Variants="Ruby"
        >
          <Paragraph Background="GhostWhite">
            This FlowDocument has numerous typography variations applied.
          </Paragraph>
        </FlowDocument>
      </FlowDocumentReader>
      <!--</Snippet_FlowDocumentTypographyXAML>-->
    </Grid>

    <Grid Grid.Row="13">
      <FlowDocumentReader>
        <FlowDocument>
          <Paragraph Background="GhostWhite">
            Text effects.
          </Paragraph>
        </FlowDocument>
      </FlowDocumentReader>
    </Grid>

    <Grid Grid.Row="14">
      <!--<Snippet_FlowDocumentHyphenateXAML>-->
      <FlowDocumentReader>
        <FlowDocument
          TextAlignment="Justify" 
          IsHyphenationEnabled="True"
          IsOptimalParagraphEnabled="True"
          Background="LightGray"
          PageWidth="400" PageHeight="480"
        >
          <Paragraph>
            <Hyperlink NavigateUri="http://www.xbox.com/en-US/games/p/perfectdarkzero/default.htm">
              Perfect Dark Zero
            </Hyperlink>
          </Paragraph>
          <Paragraph>
            Joanna Dark returns in the Xbox 360 exclusive <Bold><Italic>Perfect Dark Zero</Italic></Bold>, the 
            prequel to the internationally award-winning and multi-million selling first-person shooter 
            <Italic>Perfect Dark</Italic> from famed game developer Rare.
          </Paragraph>
          <Paragraph>
            A secret war has begun between shadowy corporations bent on world domination. Joanna Dark and her father 
            Jack are caught up in the fight for the future of the planet. A routine bounty hunting mission rips open 
            a global conspiracy that will change Joanna's destiny—forever.
          </Paragraph>
          <Paragraph>
            Guide Joanna Dark on her journey to become the perfect agent. Featuring a compelling and captivating story, 
            <Italic>Perfect Dark Zero</Italic> plunges you into a world of corporate espionage and conspiracy. The title 
            merges the excitement and intrigue of its predecessor with revolutionary game design, cutting-edge online play,
            and amazing graphics to deliver an experience that defines next-generation gaming and entertainment...
          </Paragraph>
        </FlowDocument>
      </FlowDocumentReader>
      <!--</Snippet_FlowDocumentHyphenateXAML>-->
    </Grid>


    <Grid Grid.Row="15">
      <!--<Snippet_FlowDocumentOptimalFitXAML>-->
      <FlowDocumentReader>
        <FlowDocument
          TextAlignment="Justify" 
          IsOptimalParagraphEnabled="True"
          IsHyphenationEnabled="True"
          Background="AliceBlue"
          PageWidth="400" PageHeight="480"
        >
          <Paragraph>
            <Italic>
              "One of the most important operations necessary when text materials
              are prepared for printing or display is the task of dividing long
              paragraphs into individual lines. When this job has been done well,
              people will not be aware of the fact that the words they are reading
              have been broken apart arbitrarily and placed into a somewhat rigid
              and unnatural rectangular framework; but if the job has been done
              poorly, readers will be distracted by bad breaks that interrupt
              their train of thought."
            </Italic>
          </Paragraph>
          <Paragraph>
            <Hyperlink NavigateUri="http://www-cs-faculty.stanford.edu/~knuth/">
              - Donald E. Knuth
            </Hyperlink>
          </Paragraph>
          <Paragraph>
            <Bold>
              Principle of Optimal Paragraph
            </Bold>
          </Paragraph>
          <Paragraph>
            Knuth started his revolutionary work of developing a computer program to
            produce high quality publication in the late ’70. The program he developed
            called TEX (pronounced "tek") is highly regarded as the work that helps
            shape the field of digital typography and desktop publishing. It is still
            being widely used and constantly extended by many others up to today. One
            of the most intriguing inventions in this program is its ability to produce
            superior quality paragraph layout for printing and reading purpose – arguably
            comparable to the work manually done by most respectable publishers of the
            modern times.  This typographically beautiful paragraph layout is driven by
            a line breaking algorithm known as <Italic>total-fit</Italic> or
            <Italic>optimum-fit</Italic> algorithm. Some call the kind of paragraph
            produced by this algorithm <Italic>Optimal Paragraph</Italic>.
          </Paragraph>
          <Paragraph>
            In principle, the task of text formatting consists of two main components:
            choosing where to end individual lines and how to justify the lines. The first
            component may involve the task of word division called <Italic>hyphenation</Italic>.
            Line justification is the task of fitting a line into a desired width. Usually
            it is done by distributing the extra space into or taking out excess space
            from inter-word spaces in the line. Line justification is strongly dependent
            to line breaking. When line breaking is done properly, justification can be
            done without the need to change the spacing too much and thereby avoiding
            holes between words that would distress the eyes of the reader.
          </Paragraph>
          <Paragraph>
            Unlike a standard line breaking algorithm which breaks the line without taking
            into account the line that may come after it, the total-fit algorithm breaks
            line by looking ahead on what may come later in the paragraph and make a single
            decision to break all the lines at once.  The main idea of the algorithm is to
            provide a way to break a paragraph into lines so that the interword spacing is
            balanced between all the lines of the paragraph. This is attained by choosing
            the sequence of breakpoints with the minimal total cost over all lines. The
            cost of a line depends on many factors that can affect the visual appearance
            of the line, such as the measure of interword space changing, the division of
            the last word of the line, etc.
          </Paragraph>

        </FlowDocument>
      </FlowDocumentReader>      
      <!--</Snippet_FlowDocumentOptimalFitXAML>-->
    </Grid>

    <Grid Grid.Row="16">
      <!--<Snippet_FlowDocumentReaderXAML>-->
      <FlowDocumentReader
        IsFindEnabled="True"  
        IsPrintEnabled="True"
        MinZoom="50" MaxZoom="1000"
        Zoom="120" ZoomIncrement="5"
      >
        <FlowDocument>
          <Paragraph>
            Flow content...
          </Paragraph>
        </FlowDocument>
      </FlowDocumentReader>
      <!--</Snippet_FlowDocumentReaderXAML>-->
    </Grid>

    <Grid Grid.Row="17">
      <!--<Snippet_FlowDocRdr_BaseXAML>-->
      <FlowDocumentReader
        Name="flowDocRdr" 
        IsFindEnabled="True"  
        IsPrintEnabled="True"
        MinZoom="50" MaxZoom="1000"
        Zoom="120" ZoomIncrement="5"
      />
      <!--</Snippet_FlowDocRdr_BaseXAML>-->
    </Grid>

    <Grid Grid.Row="18">
      <!--<Snippet_FlowDocPageViewer_BaseXAML>-->
    <FlowDocumentPageViewer
      Name="flowDocPageViewer" 
      MinZoom="50" MaxZoom="1000"
      Zoom="120" ZoomIncrement="5"
      />
    <!--</Snippet_FlowDocPageViewer_BaseXAML>-->
    </Grid>

    <Grid Grid.Row="19">
      <!--<Snippet_FlowDocScrollViewer_BaseXAML>-->
      <FlowDocumentScrollViewer
        Name="flowDocScrollViewer" 
        HorizontalScrollBarVisibility="Auto" 
        VerticalScrollBarVisibility="Auto" 
        IsSelectionEnabled="True" 
        IsToolBarVisible="True" 
        MinZoom="50" MaxZoom="1000"
        Zoom="120" ZoomIncrement="5"
      />
      <!--</Snippet_FlowDocScrollViewer_BaseXAML>-->
    </Grid>

    <Grid Grid.Row="20">
      <!--<Snippet_FlowDocumentPageViewerXAML>-->
      <FlowDocumentPageViewer
        MinZoom="50" MaxZoom="1000"
        Zoom="120" ZoomIncrement="5"
      >
        <FlowDocument>
          <Paragraph>
            Flow content...
          </Paragraph>
        </FlowDocument>
      </FlowDocumentPageViewer>
      <!--</Snippet_FlowDocumentPageViewerXAML>-->
    </Grid>

    <Grid Grid.Row="21">
      <!--<Snippet_FlowDocumentScrollViewerXAML>-->
      <FlowDocumentScrollViewer
        HorizontalScrollBarVisibility="Auto" 
        VerticalScrollBarVisibility="Auto" 
        IsSelectionEnabled="True" 
        IsToolBarVisible="True" 
        MinZoom="50" MaxZoom="1000"
        Zoom="120" ZoomIncrement="5"
      >
        <FlowDocument>
          <Paragraph>
            Flow content...
          </Paragraph>
        </FlowDocument>
      </FlowDocumentScrollViewer>
      <!--</Snippet_FlowDocumentScrollViewerXAML>-->
    </Grid>

    <Grid Grid.Row="22">
      <!--<Snippet_TextBlockPropsXAML>-->
      <TextBlock 
        Name="textBlock"
        
        Background="AntiqueWhite" 
        Foreground="Navy" 
        
        FontFamily="Century Gothic"
        FontSize="12"
        FontStretch="UltraExpanded"
        FontStyle="Italic"
        FontWeight="UltraBold"
        
        LineHeight="Auto"
        Padding="5,10,5,10"
        TextAlignment="Center"
        TextWrapping="Wrap"
        
        Typography.NumeralStyle="OldStyle"
        Typography.SlashedZero="True"
      >
        <Run Background="LightGreen">Text run 1.</Run>
        <LineBreak/><Run Background="LightBlue">Text run 2.</Run>
        <LineBreak/><Run Background="LightYellow">Text run 3.</Run>
      </TextBlock>
      <!--</Snippet_TextBlockPropsXAML>-->
    </Grid>

    <Grid Grid.Row="23">
      <StackPanel Width="250" Margin="10">
        <!--<Snippet_TextBlockSimpleXAML>-->
        <TextBlock Name="textBlock1" TextWrapping="Wrap">
          <Bold>TextBlock</Bold> is designed to be <Italic>lightweight</Italic>,
          and is geared specifically at integrating <Italic>small</Italic> portions
          of flow content into a UI.
        </TextBlock>
        <Button Width="100" Margin="10">Click Me</Button>
        <TextBlock  Name="textBlock2" 
          TextWrapping="Wrap" Background="AntiqueWhite" TextAlignment="Center"
        >
          By default, a TextBlock provides no UI beyond simply displaying its contents.
        </TextBlock>
        <Button Width="100" Margin="10">Click Me</Button>
        <!--</Snippet_TextBlockSimpleXAML>-->
      </StackPanel>
    </Grid>

    <Grid Grid.Row="24">

    </Grid>

  </Grid>
</Window>
