Imports System.Collections.Generic
Imports System.Text
Imports System.Windows
Imports System.Windows.Controls
Imports System.Windows.Data
Imports System.Windows.Documents
Imports System.Windows.Input
Imports System.Windows.Media
Imports System.Windows.Media.Imaging
Imports System.Windows.Shapes
Imports System.Xml


Namespace FindGeneratedItems
	''' <summary>
	''' Interaction logic for Window1.xaml
	''' </summary>

	Partial Public Class Window1
		Inherits System.Windows.Window

		Public Sub New()
			InitializeComponent()
		End Sub


		Private Sub ControlTemplateFindElement(ByVal sender As Object, ByVal e As RoutedEventArgs)
			'<SnippetCTFindElement>
			' Finding the grid that is generated by the ControlTemplate of the Button
			Dim gridInTemplate As Grid = CType(myButton1.Template.FindName("grid", myButton1), Grid)

			' Do something to the ControlTemplate-generated grid
			MessageBox.Show("The actual width of the grid in the ControlTemplate: " & gridInTemplate.GetValue(Grid.ActualWidthProperty).ToString())
			'</SnippetCTFindElement>
		End Sub

		Private Sub DataTemplateFindElement(ByVal sender As Object, ByVal e As RoutedEventArgs)
			' <SnippetDTFindElement>
			' Getting the currently selected ListBoxItem
			' Note that the ListBox must have
			' IsSynchronizedWithCurrentItem set to True for this to work
			Dim myListBoxItem As ListBoxItem = CType(myListBox.ItemContainerGenerator.ContainerFromItem(myListBox.Items.CurrentItem), ListBoxItem)

			' Getting the ContentPresenter of myListBoxItem
			Dim myContentPresenter As ContentPresenter = FindVisualChild(Of ContentPresenter)(myListBoxItem)

			' Finding textBlock from the DataTemplate that is set on that ContentPresenter
			Dim myDataTemplate As DataTemplate = myContentPresenter.ContentTemplate
			Dim myTextBlock As TextBlock = CType(myDataTemplate.FindName("textBlock", myContentPresenter), TextBlock)

			' Do something to the DataTemplate-generated TextBlock
			MessageBox.Show("The text of the TextBlock of the selected list item: " & myTextBlock.Text)
			' </SnippetDTFindElement>
		End Sub

		' <SnippetFVC>
		Private Function FindVisualChild(Of childItem As DependencyObject)(ByVal obj As DependencyObject) As childItem
			For i As Integer = 0 To VisualTreeHelper.GetChildrenCount(obj) - 1
				Dim child As DependencyObject = VisualTreeHelper.GetChild(obj, i)
				If child IsNot Nothing AndAlso TypeOf child Is childItem Then
					Return CType(child, childItem)
				Else
					Dim childOfChild As childItem = FindVisualChild(Of childItem)(child)
					If childOfChild IsNot Nothing Then
						Return childOfChild
					End If
				End If
			Next i
			Return Nothing
		End Function
		' </SnippetFVC>
	End Class
End Namespace